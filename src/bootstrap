#!/usr/bin/env python

# ------------------------------------------------------------- #
#                 Obliging Ode & Unsung Anthem
# ------------------------------------------------------------- #
#
# This source file is part of the Obliging Ode and Unsung Anthem
# projects.
#
# Copyright (C) 2019 Antti Kivi
# All rights reserved
#
# ------------------------------------------------------------- #

"""
This tool sets up the dependencies of Obliging Ode and Unsung
Anthem so you can develop and build them.
"""

from __future__ import print_function

import argparse
from datetime import datetime, time
import os
import sys
import time

from util import diagnostics, shell

from util.date import date_difference, to_date_string

from support.presets import get_all_preset_names, get_preset_options

from support.variables import HOME, ANTHEM_SOURCE_ROOT, ANTHEM_REPO_NAME


def _run_preset():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Builds Obliging Ode and Unsung Anthem using a preset.")
    parser.add_argument(
        "-n", "--dry-run",
        help="print the commands that would be run, but don't run them",
        action="store_true",
        default=False)
    parser.add_argument(
        "-c", "--clean",
        help="do a clean build",
        action="store_true",
        default=False)
    parser.add_argument(
        "--preset-file",
        help="load presets from the given file",
        metavar="PATH",
        action="append",
        dest="preset_file_names",
        default=[])
    parser.add_argument(
        "--preset",
        help="use the given option preset",
        metavar="NAME")
    parser.add_argument(
        "--show-presets",
        help="list all presets and exit",
        action="store_true")
    parser.add_argument(
        "-j", "--jobs",
        help="the number of parallel build jobs to use",
        type=int,
        dest="build_jobs")
    parser.add_argument(
        "preset_substitutions_raw",
        help="'name=value' pairs that are substituted in the preset",
        nargs="*",
        metavar="SUBSTITUTION")
    parser.add_argument(
        "--expand-build-script-invocation",
        help="Print the build-script invocation made by the preset, but "
             "don't run it",
        action="store_true")
    parser.add_argument(
        "-v", "--verbose",
        help="print the commands executed during the build",
        action="store",
        type=int,
        default=0)
    parser.add_argument(
        "--develop-stack",
        help="Use the local, development version of the build script",
        action="store_true")
    args = parser.parse_args()

    shell.DRY_RUN = args.dry_run
    shell.ECHO = args.verbose >= 1

    diagnostics.DEBUG = args.verbose >= 1
    diagnostics.VERBOSE = args.verbose >= 2

    if not args.preset_file_names:
        args.preset_file_names = [
            os.path.join(HOME, ".anthem-build-presets"),
            os.path.join(HOME, ".ode-build-presets"),
            os.path.join(
                ANTHEM_SOURCE_ROOT, ANTHEM_REPO_NAME, "util",
                "build-presets.ini")
        ]

    if args.show_presets:
        for name in sorted(
                get_all_preset_names(args.preset_file_names), key=str.lower):
            print(name)
        return 0

    if not args.preset:
        diagnostics.fatal("Missing the '--preset' option")

    args.preset_substitutions = {}

    for arg in args.preset_substitutions_raw:
        name, value = arg.split("=", 1)
        args.preset_substitutions[name] = value

    preset_args = get_preset_options(
        args.preset_substitutions, args.preset_file_names, args.preset)

    build_script_args = [sys.argv[0]]

    if args.dry_run:
        build_script_args += ["--dry-run"]
    if args.clean:
        build_script_args += ["--clean"]
    if args.verbose:
        build_script_args += ["--verbose", args.verbose]
    if args.develop_stack:
        build_script_args += ["--develop-stack"]
    build_script_args += preset_args
    if args.build_jobs:
        build_script_args += ["--jobs", str(args.build_jobs)]

    diagnostics.note("Using preset '{}', which expands to \n\n{}\n".format(
        args.preset, shell.quote_command(build_script_args)))
    diagnostics.debug(
        "The script will run with '{}' as the Python executable\n".format(
            sys.executable))

    if args.expand_build_script_invocation:
        return 0

    command_to_run = [sys.executable] + build_script_args

    shell.caffeinate(command_to_run)

    return 0


def _run():
    # parser = driver_arguments.create_argument_parser()
    # TODO Unknown args
    # args, unknown_args = parser.parse_known_args(
    #     list(arg for arg in sys.argv[1:] if arg != '--'))
    return 0


def _main():
    if sys.version_info.major == 2:
        if sys.version_info.minor < 7:
            diagnostics.fatal(
                "You're using Python {}, and the smallest supported version "
                "is {}".format(sys.version, "2.7"))
        else:
            diagnostics.warn("You're using Python {}".format(sys.version))
            diagnostics.warn(
                "You should really update to Python 3 to make the world a "
                "better place!")
            eol_date = datetime.strptime(
                "2020-01-01 00:00:00", "%Y-%m-%d %H:%M:%S")
            now = datetime.now()
            diagnostics.warn(
                "Also, the end of life of Python 2.7 is in {}, on 1 January, "
                "2020".format(to_date_string(date_difference(now, eol_date))))
    else:
        diagnostics.fine("You're using Python {}".format(sys.version))
        diagnostics.fine("You seem to have an excellent taste!")

    if not ANTHEM_SOURCE_ROOT:
        diagnostics.fatal(
            "Couldn't work out the source root directory (did you forget to "
            "set the '$ANTHEM_SOURCE_ROOT' environment variable?)")

    if not os.path.isdir(ANTHEM_SOURCE_ROOT):
        diagnostics.fatal(
            "The source root directory '{}' doesn't exist (did you forget to "
            "set $ANTHEM_SOURCE_ROOT environment variable?)".format(
                ANTHEM_SOURCE_ROOT))

    if any([(opt.startswith("--preset") or opt == "--show-presets")
            for opt in sys.argv[1:]]):
        return _run_preset()
    else:
        return _run()


if __name__ == "__main__":
    sys.exit(_main())
